
[% IF rsyslog.elasticsearch.enable == "yes" -%]
[% elasticsearch_template='S=$rs SS=\'$rr\' M=$rm R=$ru F=$fu T=$tu IP=$avp(s:ip):$avp(s:port)($si:$sp) UAIP=$si UA=\'$ua\' ID=$ci ' -%]
[% logreq_init=elasticsearch_template -%]
[% logreq=elasticsearch_template -%]
[% logres_init=elasticsearch_template -%]
[% logres=elasticsearch_template -%]
[% ELSE -%]
[% MACRO logreq_init GET kamailio.proxy.log.request_init.join(' ') -%]
[% MACRO logreq GET kamailio.proxy.log.request.join(' ') -%]
[% MACRO logres_init GET kamailio.proxy.log.response_init.join(' ') -%]
[% MACRO logres GET kamailio.proxy.log.response.join(' ') -%]
[% END -%]
[% MACRO debug_dump(type, name) BLOCK -%]
#!ifdef WITH_DEBUG_TEST
xdbg("[% type %] of route [% name %] - $mi $rm\n");
dbg_pv_dump(30, "L_DBG");
#!endif
[% END -%]
########################################################################
# Main route
########################################################################
route[ROUTE_REG_REQUEST]
{
	[% debug_dump('start', 'ROUTE_REG_REQUEST') %]
	force_rport();

	#!ifdef PROXY_LOOKUP
	route(ROUTE_FIX_PROXYLU_URI);
	#!endif

	if(!is_domain_local("$rd"))
	{
		xlog("L_WARN", "Domain not served here - [% logreq -%]\n");
		sl_send_reply("403", "Domain not served here");
		[% debug_dump('exit', 'ROUTE_REG_REQUEST') %]
		exit;
	}

	route(ROUTE_REG_HANDLE);
	[% debug_dump('end', 'ROUTE_REG_REQUEST') %]
}

########################################################################
# Load and check preferences
########################################################################
route[ROUTE_PREFERENCES]
{
	[% debug_dump('start', 'ROUTE_PREFERENCES') %]
	if ($var(from_trusted) != 1)
	{
		$var(pref_domain) = $avp(s:caller_domain);
	}
	else
	{
		$var(pref_domain) = $fd;
	}
	xlog("L_INFO", "[LUA] Load caller preferences for uuid '$avp(s:caller_uuid)' and domain part of uri '$var(pref_domain)' - [% logreq -%]\n");
	if (!lua_run("ngcp_caller_usr_load", "$avp(s:caller_uuid)", "$var(pref_domain)")) {
		sl_send_reply("500", "Internal Error");
		[% debug_dump('exit', 'ROUTE_PREFERENCES') %]
		exit;
	}

	# IP authorization
	if(!pv_isset("$xavp(caller_real_prefs[0]=>ignore_allowed_ips)") &&
	   !pv_isset("$xavp(caller_real_prefs[0]=>allowed_ips_grp)") &&
	   !pv_isset("$xavp(caller_real_prefs[0]=>man_allowed_ips_grp)"))
	{
		xlog("L_INFO", "IP authorization not provisioned, allow registration - [% logreq -%]\n");
	}
	else if($xavp(caller_real_prefs[0]=>ignore_allowed_ips) == 1)
	{
		xlog("L_INFO", "IP authorization disabled, allow registration - [% logreq -%]\n");
	}
	else
	{
		$(avp(s:ipauth_id)[*]) = 0;
		if(!pv_isset("$xavp(caller_real_prefs[0]=>allowed_ips_grp)"))
		{
			$xavp(caller_real_prefs[0]=>allowed_ips_grp) = 0;
		}
		if(!pv_isset("$xavp(caller_real_prefs[0]=>man_allowed_ips_grp)"))
		{
			$xavp(caller_real_prefs[0]=>man_allowed_ips_grp) = 0;
		}

		avp_db_query("SELECT id FROM address WHERE ip_addr = INET_NTOA(INET_ATON('$avp(s:ip)') & (0xFFFFFFFF << 32 - mask & 0xFFFFFFFF)) and grp in ($xavp(caller_real_prefs[0]=>allowed_ips_grp), $xavp(caller_real_prefs[0]=>man_allowed_ips_grp))", "$avp(s:ipauth_id)");

		if($avp(s:ipauth_id) == 0)
		{
			xlog("L_WARN", "No ipauth id found, block registration - [% logreq -%]\n");
			sl_send_reply("403", "Unauthorized IP detected");
			[% debug_dump('exit', 'ROUTE_PREFERENCES') %]
			exit;
		}
		else
		{
			xlog("L_INFO", "Found ipauth id '$avp(s:ipauth_id)', registration authorized on IP level - [% logreq -%]\n");
		}
	}
	[% debug_dump('end', 'ROUTE_PREFERENCES') %]
}

route[ROUTE_REG_HANDLE]
{
	[% debug_dump('start', 'ROUTE_REG_HANDLE') %]
	route(ROUTE_AUTH);

	if($var(from_trusted) != 1 && !check_to()) 
	{
		xlog("L_NOTICE", "Invalid To-URI detected - [% logreq -%]");
		sl_send_reply("403", "Invalid To-URI Detected");
		[% debug_dump('exit', 'ROUTE_REG_HANDLE') %]
		exit;
	}
	if($avp(s:caller_uuid) == $null)
	{
		xlog("L_WARN", "No UUID for subscriber found - [% logreq -%]");
		sl_send_reply("500", "No UUID for subscriber found");
		[% debug_dump('exit', 'ROUTE_REG_HANDLE') %]
		exit;
	}

	route(ROUTE_PREFERENCES);

	if($avp(s:nat) == 1)
	{
		fix_nated_register();
		if(!pv_isset("$xavp(caller_real_prefs[0]=>no_nat_sipping)"))
		{
			setbflag(FLB_NATB);
			setbflag(FLB_NATSIPPING); # ping nated clients
		}
		else
		{
			setbflag(FLB_NATPING_DISABLE);
			xlog("L_INFO", "NAT ping disabled by preference - [% logreq -%]");
		}
	}
	if($avp(s:af) == 6)
	{
		setbflag(FLB_CALLEE_IPV6);
	}

	/*
	# sanity check to prevent looping attacks
	$avp(s:cdom) = $(ct{re.subst,/^<?(.+)>?(\;.+)?$/\1/});
	$avp(s:cdom) = $(avp(s:cdom){uri.domain});
		
	xlog("L_INFO", "Checking contact domain '$avp(s:cdom)' - [% logreq -%]");

	if($avp(s:cdom) =~ "^127\.0\.0\." ||
	   (!isbflagset(FLB_NATB) && $avp(s:cdom) =~ "^192\.168\.") ||
	   # $avp(s:cdom) =~ "OWN_IP_PATTERN" ||
	   is_domain_local("$avp(s:cdom)"))
	{
		xlog("L_ERR", "Invalid contact domain '$avp(s:cdom)' detected - [% logreq -%]");
		sl_send_reply("403", "Invalid contact domain");
		[% debug_dump('exit', 'ROUTE_REG_HANDLE') %]
		exit;

	}
	*/

	if (is_present_hf("Expires"))
	{
		$var(expires) = $hdr(Expires);
	}
	if (is_present_hf("Contact"))
	{
		$var(expires_param) = @contact.expires;
	}
	if($var(expires_param) != "")
	{
		$var(expires) = $var(expires_param);
	}

	save("location");
	switch($retcode)
	{
		case -1:
			xlog("L_ERR", "Contacts failed - [% logreq -%]");
			sl_reply_error();
			[% debug_dump('exit', 'ROUTE_REG_HANDLE') %]
			exit;
		case 1:
			xlog("L_NOTICE", "Contacts successfully saved, expires in $var(expires)s - [% logreq -%]");
			break;
		case 2:
			xlog("L_NOTICE", "Contacts successfully updated, expires in $var(expires)s - [% logreq -%]");
			break;
		case 3:
			xlog("L_NOTICE", "Contacts successfully deleted - [% logreq -%]");
			break;
		case 4:
			xlog("L_NOTICE", "Contacts successfully fetched - [% logreq -%]");
			break;
	}

	[% debug_dump('exit', 'ROUTE_REG_HANDLE') %]
	exit;
}


# vim: ft=cfg
