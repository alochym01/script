from subprocess import Popen, PIPE
import json
import shlex
import ImageFile
import os
import sys


def getsizes(fname):
    # get file size *and* image size (None if not known)
    file = open(fname)
    size = os.path.getsize(fname)
    p = ImageFile.Parser()
    while True:
        data = file.read(1024)
        if not data:
            break
        p.feed(data)
        if p.image:
            file.close()
            return p.image.size
    file.close()
    return size, None


def dimension_img(width, height, flag):
    dict = {}
    list_width43 = [120, 128, 136, 144, 152, 160, 168, 176, 184, 192, 200, 208, 216, 224, 232, 240, 248, 256, 264, 272, 280, 288, 296, 304, 312, 320, 328, 336, 344, 352, 360, 368, 376, 384, 392, 400, 408, 416, 424, 432, 440, 448, 456, 464, 472, 480, 488, 496, 504, 512, 520, 528, 536, 544, 552, 560, 568, 576, 584, 592, 600, 608, 616, 624, 632, 640, 648, 656, 664, 672, 680, 688, 696, 704, 712, 720, 728, 736, 744, 752, 760, 768, 776, 784, 792, 800, 808, 816, 824, 832, 840, 848, 856, 864, 872, 880, 888, 896, 904, 912, 920, 928, 936, 944, 952, 960, 968, 976, 984, 992, 1000, 1008, 1016, 1024, 1032, 1040, 1048, 1056, 1064, 1072, 1080, 1088, 1096, 1104, 1112, 1120, 1128, 1136, 1144, 1152, 1160, 1168, 1176, 1184, 1192]
    dict_43 = {120:90, 128:96, 136:102, 144:108, 152:114, 160:120, 168:126, 176:132, 184:138, 192:144, 200:150, 208:156, 216:162, 224:168, 232:174, 240:180, 248:186, 256:192, 264:198, 272:204, 280:210, 288:216, 296:222, 304:228, 312:234, 320:240, 328:246, 336:252, 344:258, 352:264, 360:270, 368:276, 376:282, 384:288, 392:294, 400:300, 408:306, 416:312, 424:318, 432:324, 440:330, 448:336, 456:342, 464:348, 472:354, 480:360, 488:366, 496:372, 504:378, 512:384, 520:390, 528:396, 536:402, 544:408, 552:414, 560:420, 568:426, 576:432, 584:438, 592:444, 600:450, 608:456, 616:462, 624:468, 632:474, 640:480, 648:486, 656:492, 664:498, 672:504, 680:510, 688:516, 696:522, 704:528, 712:534, 720:540, 728:546, 736:552, 744:558, 752:564, 760:570, 768:576, 776:582, 784:588, 792:594, 800:600, 808:606, 816:612, 824:618, 832:624, 840:630, 848:636, 856:642, 864:648, 872:654, 880:660, 888:666, 896:672, 904:678, 912:684, 920:690, 928:696, 936:702, 944:708, 952:714, 960:720, 968:726, 976:732, 984:738, 992:744, 1000:750, 1008:756, 1016:762, 1024:768, 1032:774, 1040:780, 1048:786, 1056:792, 1064:798, 1072:804, 1080:810, 1088:816, 1096:822, 1104:828, 1112:834, 1120:840, 1128:846, 1136:852, 1144:858, 1152:864, 1160:870, 1168:876, 1176:882, 1184:888, 1192:894}
    list_height43 = [90, 96, 102, 108, 114, 120, 126, 132, 138, 144, 150, 156, 162, 168, 174, 180, 186, 192, 198, 204, 210, 216, 222, 228, 234, 240, 246, 252, 258, 264, 270, 276, 282, 288, 294, 300, 306, 312, 318, 324, 330, 336, 342, 348, 354, 360, 366, 372, 378, 384, 390, 396, 402, 408, 414, 420, 426, 432, 438, 444, 450, 456, 462, 468, 474, 480, 486, 492, 498, 504, 510, 516, 522, 528, 534, 540, 546, 552, 558, 564, 570, 576, 582, 588, 594, 600, 606, 612, 618, 624, 630, 636, 642, 648, 654, 660, 666, 672, 678, 684, 690, 696, 702, 708, 714, 720, 726, 732, 738, 744, 750, 756, 762, 768, 774, 780, 786, 792, 798, 804, 810, 816, 822, 828, 834, 840, 846, 852, 858, 864, 870, 876, 882, 888, 894]
    dict_height43 = {90:120, 96:128, 102:136, 108:144, 114:152, 120:160, 126:168, 132:176, 138:184, 144:192, 150:200, 156:208, 162:216, 168:224, 174:232, 180:240, 186:248, 192:256, 198:264, 204:272, 210:280, 216:288, 222:296, 228:304, 234:312, 240:320, 246:328, 252:336, 258:344, 264:352, 270:360, 276:368, 282:376, 288:384, 294:392, 300:400, 306:408, 312:416, 318:424, 324:432, 330:440, 336:448, 342:456, 348:464, 354:472, 360:480, 366:488, 372:496, 378:504, 384:512, 390:520, 396:528, 402:536, 408:544, 414:552, 420:560, 426:568, 432:576, 438:584, 444:592, 450:600, 456:608, 462:616, 468:624, 474:632, 480:640, 486:648, 492:656, 498:664, 504:672, 510:680, 516:688, 522:696, 528:704, 534:712, 540:720, 546:728, 552:736, 558:744, 564:752, 570:760, 576:768, 582:776, 588:784, 594:792, 600:800, 606:808, 612:816, 618:824, 624:832, 630:840, 636:848, 642:856, 648:864, 654:872, 660:880, 666:888, 672:896, 678:904, 684:912, 690:920, 696:928, 702:936, 708:944, 714:952, 720:960, 726:968, 732:976, 738:984, 744:992, 750:1000, 756:1008, 762:1016, 768:1024, 774:1032, 780:1040, 786:1048, 792:1056, 798:1064, 804:1072, 810:1080, 816:1088, 822:1096, 828:1104, 834:1112, 840:1120, 846:1128, 852:1136, 858:1144, 864:1152, 870:1160, 876:1168, 882:1176, 888:1184, 894:1192}

    list_width169 = [96, 128, 160, 192, 224, 256, 288, 320, 352, 384, 416, 448, 480, 512, 544, 576, 608, 640, 672, 704, 736, 768, 800, 832, 864, 896, 928, 960, 992, 1024, 1056, 1088, 1120, 1152, 1184, 1216, 1248, 1280, 1312, 1344, 1376, 1408, 1440, 1472, 1504, 1536, 1568, 1600, 1632, 1664, 1696, 1728, 1760, 1792, 1824, 1856, 1888, 1920]
    dict_169 = {96:54, 128:72, 160:90, 192:108, 224:126, 256:144, 288:162, 320:180, 352:198, 384:216, 416:234, 448:252, 480:270, 512:288, 544:306, 576:324, 608:342, 640:360, 672:378, 704:396, 736:414, 768:432, 800:450, 832:468, 864:486, 896:504, 928:522, 960:540, 992:558, 1024:576, 1056:594, 1088:612, 1120:630, 1152:648, 1184:666, 1216:684, 1248:702, 1280:720, 1312:738, 1344:756, 1376:774, 1408:792, 1440:810, 1472:828, 1504:846, 1536:864, 1568:882, 1600:900, 1632:918, 1664:936, 1696:954, 1728:972, 1760:990, 1792:1008, 1824:1026, 1856:1044, 1888:1062, 1920:1080}

    list_height169 = [90, 108, 126, 144, 162, 180, 198, 216, 234, 252, 270, 288, 306, 324, 342, 360, 378, 396, 414, 432, 450, 468, 486, 504, 522, 540, 558, 576, 594, 612, 630, 648, 666, 684, 702, 720, 738, 756, 774, 792, 810, 828, 846, 864, 882, 900, 918, 936, 954, 972, 990, 1008, 1026, 1044, 1062, 1080, 1098, 1116, 1134, 1152, 1170, 1188, 1206, 1224, 1242, 1260, 1278, 1296, 1314, 1332, 1350, 1368, 1386, 1404, 1422, 1440, 1458, 1476, 1494, 1512, 1530, 1548, 1566, 1584, 1602, 1620, 1638, 1656, 1674, 1692, 1710, 1728, 1746, 1764, 1782, 1800]
    dict_height169 = {90:160, 108:192, 126:224, 144:256, 162:288, 180:320, 198:352, 216:384, 234:416, 252:448, 270:480, 288:512, 306:544, 324:576, 342:608, 360:640, 378:672, 396:704, 414:736, 432:768, 450:800, 468:832, 486:864, 504:896, 522:928, 540:960, 558:992, 576:1024, 594:1056, 612:1088, 630:1120, 648:1152, 666:1184, 684:1216, 702:1248, 720:1280, 738:1312, 756:1344, 774:1376, 792:1408, 810:1440, 828:1472, 846:1504, 864:1536, 882:1568, 900:1600, 918:1632, 936:1664, 954:1696, 972:1728, 990:1760, 1008:1792, 1026:1824, 1044:1856, 1062:1888, 1080:1920, 1098:1952, 1116:1984, 1134:2016, 1152:2048, 1170:2080, 1188:2112, 1206:2144, 1224:2176, 1242:2208, 1260:2240, 1278:2272, 1296:2304, 1314:2336, 1332:2368, 1350:2400, 1368:2432, 1386:2464, 1404:2496, 1422:2528, 1440:2560}
    if flag:
        print 'go width flag=%s, width=%s' % (flag, width)
        for i in list_width43:
            if i > width:
                if dict_43[i] > height:
                    dict.update({"43": {"width": i, "height" :dict_43[i]}})
                    break
        for j in list_width169:
            if j > width:
                if dict_169[j] > height:
                    dict.update({"169": {"width":j, "height":dict_169[j]}})
                    break
    else:
        print 'go height flag=%s, height=%s' % (flag, height)
        for i in list_height43:
            if i > height:
                dict.update({"width":i, "height": dict_height43[i]})
                break
        for j in list_height169:
            if j > height:
                dict.update({"169": {"width":j, "height": dict_height[j]}})
                break
    # should be normalize the image into 4:3 dimension and 16:9 dimension
    # using the ffmpeg -i input_img -vf "pad=800:450:(800-665)/2:(450-410)/2:Snow" out_img
    # pad=width:height:x:y - the padding should be bigger than dimension(width, height) of image
    return dict

with open('result.txt') as f:
    for line in f.readlines()[1:]:
        # real image file
        img = line.split('\n')[0]
        # get the width of image
        width, height = getsizes(img)
        print img
        print width
        print height
        if width > height:
            padding = dimension_img(width, height, True)
        else:
            padding = dimension_img(width, height, False)
        print padding
        #print padding_43
        padding_43 = 'pad=%s:%s:(%d-%d)/2:(%d-%d)/2' % (padding['43']['width'], padding['43']['height'], padding['43']['width'], width, padding['43']['height'], height)
        padding_169 = 'pad=%s:%s:(%d-%d)/2:(%d-%d)/2' % (padding['169']['width'], padding['169']['height'], padding['169']['width'], width, padding['169']['height'], height)
        cli_43 = "ffmpeg -i  %s -vf '%s:black' %s_%s.jpg -y" % (img, padding_43, img, 43)
        cli_169 = "ffmpeg -i %s -vf '%s:black' %s_%s.jpg -y" % (img, padding_169, img, 169)
        #print cli_43
        #print cli_169
        cli_43 = shlex.split(cli_43)
        cli_169 = shlex.split(cli_169)
        print cli_43
        print cli_169
        cmd_43 = Popen(cli_43, stdout=PIPE).communicate()
        print cmd_43
        cmd_169 = Popen(cli_169, stdout=PIPE).communicate()
        print cmd_169
        break
        # string remove '/' put it into a slug(list)
        slug = line.split('/')
        # the path of json file
        path = '/'.join(slug[:-1])
        filename = '%s/%s.html' % (path, slug[-2])
        try:
            with open(filename) as f:
                video = json.loads(f.read())
            # ffmpeg commandline
            small_cmd = 'ffmpeg -y -i %s  -vf scale=120:-1 %s/%s-small.jpg' % (img, path, video['items'][0]['etag'])
            small_cmd = shlex.split(small_cmd)
            small = Popen(small_cmd, stdout=PIPE).communicate()
            print small
        except Exception as e:
            print str(e)
